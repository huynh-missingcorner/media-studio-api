---
description: 
globs: 
alwaysApply: true
---
You are a senior TypeScript programmer with experience in the NestJS framework and a preference for clean programming and design patterns. Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## TypeScript General Guidelines

### Package Management
- Always use pnpm for package management
- Always use pnpx for package execution

### Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
- Except for standard abbreviations like API, URL, etc.
- Except for well-known abbreviations:
  - i, j for loops
  - err for errors
  - ctx for contexts
  - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
- If it returns a boolean, use isX or hasX, canX, etc.
- If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
- Use arrow functions for simple functions (less than 3 instructions).
- Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
- Use readonly for data that doesn't change.
- Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Testing

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
- Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
- Use test doubles to simulate dependencies.
  - Except for third-party dependencies that are not expensive to execute.
- Write acceptance tests for each module.
- Follow the Given-When-Then convention.

## Specific to NestJS

### Basic Principles

- Follow a **modular architecture** based on **Domain-Driven Design (DDD)**.
- Encapsulate each domain into a dedicated **module**.
  - One module per main domain/feature.
  - Controllers should handle **only HTTP requests** and delegate logic to services.
  - Use **DTOs** (validated with `class-validator`) for request validation.
  - Use **Entities** to represent domain models.
  - Use **Repositories** to encapsulate persistence logic.
  - Business logic should reside in **Application Services**.
  - Declare **simple types** for API responses (avoid exposing internal models).
- Use **Prisma ORM** for data persistence.
  - Each entity should have its own **repository implementation**.
  - The repository should only interact with Prisma, keeping it separate from business logic.
- A **core module** for NestJS artifacts:
  - Global filters for **exception handling**.
  - Global middlewares for **request processing**.
  - Guards for **authentication & authorization**.
  - Interceptors for **logging, caching, and transformations**.
- A **shared module** for reusable components:
  - Utility functions (e.g., hashing, logging).
  - Common services used across multiple modules.
  - External integrations (e.g., third-party APIs, cloud storage).
- Apply **Test-Driven Development (TDD)**:
  - Write unit tests for services and repositories.
  - Write integration tests for critical flows.
  - Use mocks for dependencies in tests.
- Follow **Clean Architecture** principles:
  - Keep controllers, services, and repositories separate.
  - Avoid business logic inside controllers or repositories.
  - Use dependency injection for better testability.

### Testing

- Use the standard Jest framework for testing.
- Write tests for each controller and service.
- Write end to end tests for each api module.
- Add a admin/test method to each controller as a smoke test.