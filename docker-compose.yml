version: '3.8'

services:
  api:
    container_name: media-studio-api
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      PORT: 3000

      # Database
      DATABASE_URL: postgresql://${PGUSER:-pg}:${PGPASSWORD:-pg}@postgres:5432/${PGDATABASE:-media-studio}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}

      # JWT
      JWT_SECRET: ${JWT_SECRET:-secret}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION:-15m}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-604800}

      ENABLE_SEEDING: ${ENABLE_SEEDING:-true}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-strong_admin_password}
      ADMIN_FIRST_NAME: ${ADMIN_FIRST_NAME:-Admin}
      ADMIN_LAST_NAME: ${ADMIN_LAST_NAME:-User}

      #Vertex AI
      VERTEX_AI_LOCATION: ${VERTEX_AI_LOCATION:-us-central1}
      VERTEX_AI_PROJECT_ID: ${VERTEX_AI_PROJECT_ID:-media-studio-dev}
      VERTEX_AI_MODEL_ID: ${VERTEX_AI_MODEL_ID:-media-studio-dev}
      VERTEX_AI_STORAGE_URI: ${VERTEX_AI_STORAGE_URI:-}
      STORAGE_BUCKET_NAME: ${STORAGE_BUCKET_NAME:-}

      #Google Cloud Storage
      GCS_SIGNED_URL_EXPIRATION_HOURS: ${GCS_SIGNED_URL_EXPIRATION_HOURS:-1}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - media-studio

  postgres:
    container_name: media-studio-db
    image: postgres:14-alpine
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128Mb
    ports:
      - '5432:5432'
    command: -c shared_buffers=500MB -c fsync=off
    environment:
      POSTGRES_USER: ${PGUSER:-pg}
      POSTGRES_PASSWORD: ${PGPASSWORD:-pg}
      POSTGRES_DB: ${PGDATABASE:-media-studio}
    healthcheck:
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 5
      test: ['CMD-SHELL', 'pg_isready -U ${PGUSER:-pg}']
    volumes:
      - media-studio_pg_data:/var/lib/postgresql/data
    networks:
      - media-studio

  redis:
    container_name: media-studio-redis
    image: redis:latest
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - '6379:6379'
    volumes:
      - media-studio_redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - media-studio

networks:
  media-studio:

volumes:
  media-studio_pg_data:
    driver: local
  media-studio_redis_data:
    driver: local
